/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProcessedReview as PrismaProcessedReview,
} from "@prisma/client";

export class ProcessedReviewServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessedReviewCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processedReview.count(args);
  }

  async processedReviews(
    args: Prisma.ProcessedReviewFindManyArgs
  ): Promise<PrismaProcessedReview[]> {
    return this.prisma.processedReview.findMany(args);
  }
  async processedReview(
    args: Prisma.ProcessedReviewFindUniqueArgs
  ): Promise<PrismaProcessedReview | null> {
    return this.prisma.processedReview.findUnique(args);
  }
  async createProcessedReview(
    args: Prisma.ProcessedReviewCreateArgs
  ): Promise<PrismaProcessedReview> {
    return this.prisma.processedReview.create(args);
  }
  async updateProcessedReview(
    args: Prisma.ProcessedReviewUpdateArgs
  ): Promise<PrismaProcessedReview> {
    return this.prisma.processedReview.update(args);
  }
  async deleteProcessedReview(
    args: Prisma.ProcessedReviewDeleteArgs
  ): Promise<PrismaProcessedReview> {
    return this.prisma.processedReview.delete(args);
  }
}
