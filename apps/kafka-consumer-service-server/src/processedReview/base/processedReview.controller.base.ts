/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessedReviewService } from "../processedReview.service";
import { ProcessedReviewCreateInput } from "./ProcessedReviewCreateInput";
import { ProcessedReview } from "./ProcessedReview";
import { ProcessedReviewFindManyArgs } from "./ProcessedReviewFindManyArgs";
import { ProcessedReviewWhereUniqueInput } from "./ProcessedReviewWhereUniqueInput";
import { ProcessedReviewUpdateInput } from "./ProcessedReviewUpdateInput";

export class ProcessedReviewControllerBase {
  constructor(protected readonly service: ProcessedReviewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessedReview })
  async createProcessedReview(
    @common.Body() data: ProcessedReviewCreateInput
  ): Promise<ProcessedReview> {
    return await this.service.createProcessedReview({
      data: data,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        reviewContent: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessedReview] })
  @ApiNestedQuery(ProcessedReviewFindManyArgs)
  async processedReviews(
    @common.Req() request: Request
  ): Promise<ProcessedReview[]> {
    const args = plainToClass(ProcessedReviewFindManyArgs, request.query);
    return this.service.processedReviews({
      ...args,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        reviewContent: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessedReview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processedReview(
    @common.Param() params: ProcessedReviewWhereUniqueInput
  ): Promise<ProcessedReview | null> {
    const result = await this.service.processedReview({
      where: params,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        reviewContent: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessedReview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessedReview(
    @common.Param() params: ProcessedReviewWhereUniqueInput,
    @common.Body() data: ProcessedReviewUpdateInput
  ): Promise<ProcessedReview | null> {
    try {
      return await this.service.updateProcessedReview({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          rating: true,
          reviewContent: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessedReview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessedReview(
    @common.Param() params: ProcessedReviewWhereUniqueInput
  ): Promise<ProcessedReview | null> {
    try {
      return await this.service.deleteProcessedReview({
        where: params,
        select: {
          createdAt: true,
          id: true,
          rating: true,
          reviewContent: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
